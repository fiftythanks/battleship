{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://template/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://template/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://template/./src/style.css","webpack://template/./node_modules/css-loader/dist/runtime/api.js","webpack://template/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://template/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://template/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://template/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://template/webpack/bootstrap","webpack://template/webpack/runtime/compat get default export","webpack://template/webpack/runtime/define property getters","webpack://template/webpack/runtime/hasOwnProperty shorthand","webpack://template/webpack/runtime/nonce","webpack://template/./src/style.css?7163","webpack://template/./src/modules/Battleship.mjs","webpack://template/./src/modules/Gameboard.mjs","webpack://template/./src/modules/Player.mjs","webpack://template/./src/modules/Game.mjs","webpack://template/./src/index.js"],"sourcesContent":["\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n  Josh's Custom CSS Reset\n  https://www.joshwcomeau.com/css/custom-css-reset/\n*/\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  html {\n    interpolate-size: allow-keywords;\n  }\n}\n\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n\np {\n  text-wrap: pretty;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  text-wrap: balance;\n}\n\n#root,\n#__next {\n  isolation: isolate;\n}\n\n/* My styles */\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  /* For drag and drop. When a ship is dragged, a div is created, and it must be put somewhere. So it's put outside the visible area. */\n  overflow: hidden;\n}\nbutton:hover {\n  cursor: pointer;\n}\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  & button {\n    align-self: center;\n    padding: 0.2rem 3rem;\n  }\n}\n.players-form {\n  display: flex;\n  gap: 3rem;\n}\n.player-form {\n  display: flex;\n  flex-direction: column;\n  & h2 {\n    align-self: center;\n  }\n}\n.boards {\n  display: flex;\n  gap: 10rem;\n  & > div {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n}\n.player-one,\n.player-two {\n  position: relative;\n}\n.player-one .board {\n  display: flex;\n  flex-direction: column;\n}\n.player-two .board {\n  display: none;\n  flex-direction: column;\n}\n.player-one .board-enemy {\n  display: none;\n  flex-direction: column;\n}\n.player-two .board-enemy {\n  display: flex;\n  flex-direction: column;\n}\n.board-enemy .square:hover {\n  cursor: pointer;\n}\n.row,\n.cols {\n  height: 3rem;\n  flex-shrink: 0;\n  display: flex;\n}\n.square {\n  width: 3rem;\n  height: 3rem;\n  flex-shrink: 0;\n  outline: 1px solid black;\n}\n.num,\n.letter,\n.empty {\n  width: 3rem;\n  flex-shrink: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  user-select: none;\n}\n.turn-wrapper {\n  font-size: 1.5rem;\n}\n.square.occupied,\n.square.available {\n  background-color: black;\n}\n.square.hit {\n  background-color: red;\n}\n.square.missed {\n  background-color: blue;\n}\n.square.sunk {\n  background: grey;\n}\n.board,\n.board-enemy {\n  position: relative;\n}\n#hand-over-one[open],\n#hand-over-two[open],\n#hand-over-one-enemy[open],\n#hand-over-two-enemy[open],\n#ready-one[open],\n#ready-two[open] {\n  width: calc(100% - 3rem);\n  height: calc(100% - 3rem);\n  top: 3rem;\n  left: 3rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.css\"],\"names\":[],\"mappings\":\"AAAA;;;CAGC;;AAED;;;EAGE,sBAAsB;AACxB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE;IACE,gCAAgC;EAClC;AACF;;AAEA;EACE,gBAAgB;EAChB,mCAAmC;AACrC;;AAEA;;;;;EAKE,cAAc;EACd,eAAe;AACjB;;AAEA;;;;EAIE,aAAa;AACf;;AAEA;;;;;;;EAOE,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;AACnB;AACA;;;;;;EAME,kBAAkB;AACpB;;AAEA;;EAEE,kBAAkB;AACpB;;AAEA,cAAc;AACd;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,qIAAqI;EACrI,gBAAgB;AAClB;AACA;EACE,eAAe;AACjB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX;IACE,kBAAkB;IAClB,oBAAoB;EACtB;AACF;AACA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,aAAa;EACb,sBAAsB;EACtB;IACE,kBAAkB;EACpB;AACF;AACA;EACE,aAAa;EACb,UAAU;EACV;IACE,aAAa;IACb,sBAAsB;IACtB,mBAAmB;EACrB;AACF;AACA;;EAEE,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,eAAe;AACjB;AACA;;EAEE,YAAY;EACZ,cAAc;EACd,aAAa;AACf;AACA;EACE,WAAW;EACX,YAAY;EACZ,cAAc;EACd,wBAAwB;AAC1B;AACA;;;EAGE,WAAW;EACX,cAAc;EACd,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;AACnB;AACA;EACE,iBAAiB;AACnB;AACA;;EAEE,uBAAuB;AACzB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,gBAAgB;AAClB;AACA;;EAEE,kBAAkB;AACpB;AACA;;;;;;EAME,wBAAwB;EACxB,yBAAyB;EACzB,SAAS;EACT,UAAU;EACV,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;AACzB\",\"sourcesContent\":[\"/*\\n  Josh's Custom CSS Reset\\n  https://www.joshwcomeau.com/css/custom-css-reset/\\n*/\\n\\n*,\\n*::before,\\n*::after {\\n  box-sizing: border-box;\\n}\\n\\n* {\\n  margin: 0;\\n}\\n\\n@media (prefers-reduced-motion: no-preference) {\\n  html {\\n    interpolate-size: allow-keywords;\\n  }\\n}\\n\\nbody {\\n  line-height: 1.5;\\n  -webkit-font-smoothing: antialiased;\\n}\\n\\nimg,\\npicture,\\nvideo,\\ncanvas,\\nsvg {\\n  display: block;\\n  max-width: 100%;\\n}\\n\\ninput,\\nbutton,\\ntextarea,\\nselect {\\n  font: inherit;\\n}\\n\\np,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  overflow-wrap: break-word;\\n}\\n\\np {\\n  text-wrap: pretty;\\n}\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6 {\\n  text-wrap: balance;\\n}\\n\\n#root,\\n#__next {\\n  isolation: isolate;\\n}\\n\\n/* My styles */\\nbody {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  gap: 1rem;\\n  /* For drag and drop. When a ship is dragged, a div is created, and it must be put somewhere. So it's put outside the visible area. */\\n  overflow: hidden;\\n}\\nbutton:hover {\\n  cursor: pointer;\\n}\\nform {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 1.5rem;\\n  & button {\\n    align-self: center;\\n    padding: 0.2rem 3rem;\\n  }\\n}\\n.players-form {\\n  display: flex;\\n  gap: 3rem;\\n}\\n.player-form {\\n  display: flex;\\n  flex-direction: column;\\n  & h2 {\\n    align-self: center;\\n  }\\n}\\n.boards {\\n  display: flex;\\n  gap: 10rem;\\n  & > div {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n}\\n.player-one,\\n.player-two {\\n  position: relative;\\n}\\n.player-one .board {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.player-two .board {\\n  display: none;\\n  flex-direction: column;\\n}\\n.player-one .board-enemy {\\n  display: none;\\n  flex-direction: column;\\n}\\n.player-two .board-enemy {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.board-enemy .square:hover {\\n  cursor: pointer;\\n}\\n.row,\\n.cols {\\n  height: 3rem;\\n  flex-shrink: 0;\\n  display: flex;\\n}\\n.square {\\n  width: 3rem;\\n  height: 3rem;\\n  flex-shrink: 0;\\n  outline: 1px solid black;\\n}\\n.num,\\n.letter,\\n.empty {\\n  width: 3rem;\\n  flex-shrink: 0;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  user-select: none;\\n}\\n.turn-wrapper {\\n  font-size: 1.5rem;\\n}\\n.square.occupied,\\n.square.available {\\n  background-color: black;\\n}\\n.square.hit {\\n  background-color: red;\\n}\\n.square.missed {\\n  background-color: blue;\\n}\\n.square.sunk {\\n  background: grey;\\n}\\n.board,\\n.board-enemy {\\n  position: relative;\\n}\\n#hand-over-one[open],\\n#hand-over-two[open],\\n#hand-over-one-enemy[open],\\n#hand-over-two-enemy[open],\\n#ready-one[open],\\n#ready-two[open] {\\n  width: calc(100% - 3rem);\\n  height: calc(100% - 3rem);\\n  top: 3rem;\\n  left: 3rem;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nc = undefined;","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","/* \n  1. Begin your app by creating the Ship class/factory (your choice).\n\n    1. Your ‘ships’ will be objects that include their length, the number of times they’ve been hit and whether or not they’ve been sunk.\n\n    2. REMEMBER you only have to test your object’s public interface. Only methods or properties that are used outside of your ‘ship’ object need unit tests.\n    \n    3. Ships should have a hit() function that increases the number of ‘hits’ in your ship.\n    \n    4. isSunk() should be a function that calculates whether a ship is considered sunk based on its length and the number of hits it has received.\n*/\n\nexport default class Battleship {\n  constructor(length) {\n    if (\n      typeof length !== 'number' ||\n      !Number.isInteger(length) ||\n      length < 1 ||\n      length > 5\n    )\n      throw new TypeError(\n        'Incorrect length! Length must be an integer number from 1 to 5. Any other value will result in an error.',\n      );\n    this.length = length;\n    this.hits = 0;\n  }\n\n  hit() {\n    this.hits += 1;\n  }\n\n  get isSunk() {\n    return this.hits >= this.length;\n  }\n\n  get wasHit() {\n    return this.hits > 0;\n  }\n\n  get type() {\n    let type;\n    switch (this.length) {\n      case 1:\n        type = 'patrolBoat';\n        break;\n      case 2:\n        type = 'submarine';\n        break;\n      case 3:\n        type = 'destroyer';\n        break;\n      case 4:\n        type = 'battleship';\n        break;\n      case 5:\n        type = 'carrier';\n        break;\n      default:\n      // do nothing\n    }\n    return type;\n  }\n}\n","/* eslint-disable no-labels */\n/* eslint-disable no-continue */\n/*\n  2. Create a Gameboard class/factory.\n\n    1. Note that we have not yet created any User Interface. We should know our code is coming together by running the tests. You shouldn’t be relying on console.log or DOM methods to make sure your code is doing what you expect it to.\n    \n    2. Gameboards should be able to place ships at specific coordinates by calling the ship factory or class.\n    \n    3. Gameboards should have a receiveAttack function that takes a pair of coordinates, determines whether or not the attack hit a ship and then sends the ‘hit’ function to the correct ship, or records the coordinates of the missed shot.\n    \n    4. Gameboards should keep track of missed attacks so they can display them properly.\n    \n    5. Gameboards should be able to report whether or not all of their ships have been sunk.\n*/\n\nimport Battleship from './Battleship';\n\n/* \n    1 2 3 4 5 6 7 8 9 10\n  A • • • • • • • • • •\n  B • • • • • • • • • •\n  C • • • • • • • • • • \n  D • • • • • • • • • •\n  E • • • • • • • • • •\n  F • • • • • • • • • •\n  G • • • • • • • • • •\n  H • • • • • • • • • •\n  I • • • • • • • • • •\n  J • • • • • • • • • •\n*/\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n\nfunction arrIncludes(array, coord) {\n  return (\n    array.filter(\n      (arrCoord) => arrCoord[0] === coord[0] && arrCoord[1] === coord[1],\n    ).length > 0\n  );\n}\n\nexport default class Gameboard {\n  constructor() {\n    this.rows = {};\n\n    for (let i = 0; i < 10; i += 1) {\n      const row = [];\n      for (let j = 0; j < 10; j += 1) {\n        row.push({ occupiedBy: null });\n      }\n      this.rows[`${letters[i]}`] = row;\n    }\n\n    this.misses = [];\n    this.hits = [];\n\n    // 5 squares\n    this.carrier = {\n      instance: null,\n      coords: [\n        [null, null],\n        [null, null],\n        [null, null],\n        [null, null],\n        [null, null],\n      ],\n    };\n    // 4 squares\n    this.battleship = {\n      instance: null,\n      coords: [\n        [null, null],\n        [null, null],\n        [null, null],\n        [null, null],\n      ],\n    };\n    // 3 squares\n    this.destroyer = {\n      instance: null,\n      coords: [\n        [null, null],\n        [null, null],\n        [null, null],\n      ],\n    };\n    // 2 squares\n    this.submarine = {\n      instance: null,\n      coords: [\n        [null, null],\n        [null, null],\n      ],\n    };\n    // 1 square\n    this.patrolBoat = {\n      instance: null,\n      coords: [[null, null]],\n    };\n  }\n\n  // coord = [row, col]; col parameters are not indices of elements in rows, they are column indices on the board as pictured above; row parameters are letters from A to J.\n  placeShip = (coord1, coord2) => {\n    if (!Array.isArray(coord1) || coord1.length !== 2) {\n      throw new TypeError(\n        'Incorrect coordinates! Input must be in the form (coord1, coord2), where coord1 is an array of two elements, the first of which is a capital English letter from A to J, and the second is a number from 1 to 10. coord2 is either an array abiding by the same rules or undefine.',\n      );\n    }\n    const [row1, col1] = coord1;\n    let row2;\n    let col2;\n\n    if (Array.isArray(coord2) && coord2.length === 2) {\n      [row2, col2] = coord2;\n    } else if (coord2 === undefined) {\n      row2 = undefined;\n      col2 = undefined;\n    } else {\n      throw new TypeError(\n        'Incorrect coordinates! Input must be in the form (coord1, coord2), where coord1 is an array of two elements, the first of which is a capital English letter from A to J, and the second is a number from 1 to 10. coord2 is either an array abiding by the same rules or undefine.',\n      );\n    }\n\n    if (\n      !letters.includes(row1) ||\n      typeof col1 !== 'number' ||\n      !Number.isInteger(col1) ||\n      col1 < 1 ||\n      col1 > 10 ||\n      ((row2 !== undefined || col2 !== undefined) &&\n        (!letters.includes(row2) ||\n          typeof col2 !== 'number' ||\n          !Number.isInteger(col2) ||\n          col2 < 1 ||\n          col2 > 10 ||\n          (row1 !== row2 && col1 !== col2)))\n    ) {\n      throw new Error(\n        \"Incorrect coordinates. Input must be in the form ([row1, col1], [row2, col2]), where row1, row2 are letters from A to J and col1, col2 are integers from 1 to 10. Ships must be places in one row or in one column, therefore if col1 isn't equal to col2, then row1 = row2, and if row1 isn't equal to row2, then col1 = col2.\",\n      );\n    }\n\n    let ship;\n\n    if (row2 === undefined && col2 === undefined) {\n      const row = this.rows[`${row1}`];\n      const col = col1;\n\n      if (row[col - 1].occupiedBy !== null) return null;\n\n      const type = 'patrolBoat';\n      if (this[`${type}`].instance !== null) {\n        throw new Error(\n          `A ship of type ${type} is already present on the board.`,\n        );\n      }\n\n      const length = 1;\n      ship = new Battleship(length);\n      row[col - 1].occupiedBy = ship;\n      this[`${type}`].instance = ship;\n      this[`${type}`].coords[0][0] = row1;\n      this[`${type}`].coords[0][1] = col;\n    } else if (row1 === row2) {\n      const row = this.rows[`${row1}`];\n\n      // Check if the squares are already occupied\n      for (let col = col1; col <= col2; col += 1) {\n        if (row[col - 1].occupiedBy !== null) return null;\n      }\n\n      const length = col2 - col1 + 1;\n\n      let type;\n      switch (length) {\n        case 5:\n          type = 'carrier';\n          break;\n        case 4:\n          type = 'battleship';\n          break;\n        case 3:\n          type = 'destroyer';\n          break;\n        case 2:\n          type = 'submarine';\n          break;\n        case 1:\n          type = 'patrolBoat';\n          break;\n        default:\n        // do nothing\n      }\n\n      if (this[`${type}`].instance !== null) {\n        throw new Error(\n          `A ship of type ${type} is already present on the board.`,\n        );\n      }\n\n      ship = new Battleship(length);\n      this[`${type}`].instance = ship;\n\n      for (let col = col1, i = 0; col <= col2; col += 1) {\n        row[col - 1].occupiedBy = ship;\n        this[`${type}`].coords[i][0] = row1;\n        this[`${type}`].coords[i][1] = col;\n        i += 1;\n      }\n    } else {\n      const col = col1;\n\n      // Check if the squares are already occupied\n      for (\n        let row = letters.indexOf(row1);\n        row <= letters.indexOf(row2);\n        row += 1\n      ) {\n        if (this.rows[`${letters[row]}`][col - 1].occupiedBy !== null)\n          return null;\n      }\n\n      const length = letters.indexOf(row2) - letters.indexOf(row1) + 1;\n\n      let type;\n      switch (length) {\n        case 5:\n          type = 'carrier';\n          break;\n        case 4:\n          type = 'battleship';\n          break;\n        case 3:\n          type = 'destroyer';\n          break;\n        case 2:\n          type = 'submarine';\n          break;\n        case 1:\n          type = 'patrolBoat';\n          break;\n        default:\n        // do nothing\n      }\n\n      if (this[`${type}`].instance !== null) {\n        throw new Error(\n          `A ship of type ${type} is already present on the board.`,\n        );\n      }\n\n      ship = new Battleship(length);\n      this[`${type}`].instance = ship;\n\n      for (\n        let row = letters.indexOf(row1), i = 0;\n        row <= letters.indexOf(row2);\n        row += 1\n      ) {\n        this.rows[`${letters[row]}`][col - 1].occupiedBy = ship;\n        this[`${type}`].coords[i][0] = letters[row];\n        this[`${type}`].coords[i][1] = col;\n        i += 1;\n      }\n    }\n\n    return ship;\n  };\n\n  isOccupied = (row, col) => {\n    if (\n      !letters.includes(row) ||\n      typeof col !== 'number' ||\n      !Number.isInteger(col) ||\n      col < 1 ||\n      col > 10\n    ) {\n      throw new Error(\n        'Incorrect arguments. The arguments must be in the form (row, col), where row is a letter from A to J and col is a number from 1 to 10.',\n      );\n    }\n\n    return this.rows[`${row}`][col - 1].occupiedBy;\n  };\n\n  receiveAttack = (row, col) => {\n    if (\n      !letters.includes(row) ||\n      typeof col !== 'number' ||\n      !Number.isInteger(col) ||\n      col < 1 ||\n      col > 10\n    ) {\n      throw new Error(\n        'Incorrect arguments. The arguments must be in the form (row, col), where row is a letter from A to J and col is a number from 1 to 10.',\n      );\n    }\n\n    // Check if the square has already been hit. You can't hit the same square multiple times.\n    if (\n      this.hits.filter((coord) => coord[0] === row && coord[1] === col).length >\n        0 ||\n      this.misses.filter((coord) => coord[0] === row && coord[1] === col)\n        .length > 0\n    ) {\n      throw new Error(`Square (${row}, ${col}) has already been attacked.`);\n    }\n\n    const occupation = this.isOccupied(row, col);\n    if (occupation !== null) {\n      occupation.hit();\n      this.hits.push([row, col]);\n    } else {\n      this.misses.push([row, col]);\n    }\n\n    return occupation;\n  };\n\n  get areAllSunk() {\n    if (this.carrier.instance !== null && !this.carrier.instance.isSunk)\n      return false;\n    if (this.battleship.instance !== null && !this.battleship.instance.isSunk)\n      return false;\n    if (this.destroyer.instance !== null && !this.destroyer.instance.isSunk)\n      return false;\n    if (this.submarine.instance !== null && !this.submarine.instance.isSunk)\n      return false;\n    if (this.patrolBoat.instance !== null && !this.patrolBoat.instance.isSunk)\n      return false;\n    return true;\n  }\n\n  get isFleetFull() {\n    if (this.carrier.instance === null) return false;\n    if (this.battleship.instance === null) return false;\n    if (this.destroyer.instance === null) return false;\n    if (this.submarine.instance === null) return false;\n    if (this.patrolBoat.instance === null) return false;\n    return true;\n  }\n\n  wasAttacked = (row, col) => {\n    if (\n      this.isOccupied(row, col) &&\n      this.hits.filter((coord) => coord[0] === row && coord[1] === col).length >\n        0\n    ) {\n      return true;\n    }\n    if (\n      !this.isOccupied(row, col) &&\n      this.misses.filter((coord) => coord[0] === row && coord[1] === col)\n        .length > 0\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  get isPatrolBoatSunk() {\n    return this.patrolBoat.instance.isSunk;\n  }\n\n  get wasPatrolBoatHit() {\n    return this.patrolBoat.instance.wasHit;\n  }\n\n  get isSubmarineSunk() {\n    return this.submarine.instance.isSunk;\n  }\n\n  get wasSubmarineHit() {\n    return this.submarine.instance.wasHit;\n  }\n\n  get isDestroyerSunk() {\n    return this.destroyer.instance.isSunk;\n  }\n\n  get wasDestroyerHit() {\n    return this.destroyer.instance.wasHit;\n  }\n\n  get isBattleshipSunk() {\n    return this.battleship.instance.isSunk;\n  }\n\n  get wasBattleshipHit() {\n    return this.battleship.instance.wasHit;\n  }\n\n  get isCarrierSunk() {\n    return this.carrier.instance.isSunk;\n  }\n\n  get wasCarrierHit() {\n    return this.carrier.instance.wasHit;\n  }\n\n  get patrolBoatCoords() {\n    return this.patrolBoat.coords;\n  }\n\n  get submarineCoords() {\n    return this.submarine.coords;\n  }\n\n  get destroyerCoords() {\n    return this.destroyer.coords;\n  }\n\n  get battleshipCoords() {\n    return this.battleship.coords;\n  }\n\n  get carrierCoords() {\n    return this.carrier.coords;\n  }\n\n  changeShipPosition = (coord1, coord2) => {\n    if (!Array.isArray(coord1) || coord1.length !== 2) {\n      throw new TypeError(\n        'Incorrect coordinates! Input must be in the form (coord1, coord2), where coord1 is an array of two elements, the first of which is a capital English letter from A to J, and the second a number from 1 to 10. coord2 is either an array abiding by the same rules or undefined.',\n      );\n    }\n    const [row1, col1] = coord1;\n    let row2;\n    let col2;\n\n    if (Array.isArray(coord2) && coord2.length === 2) {\n      [row2, col2] = coord2;\n    } else if (coord2 === undefined) {\n      row2 = undefined;\n      col2 = undefined;\n    } else {\n      throw new TypeError(\n        'Incorrect coordinates! Input must be in the form (coord1, coord2), where coord1 is an array of two elements, the first of which is a capital English letter from A to J, and the second is a number from 1 to 10. coord2 is either an array abiding by the same rules or undefine.',\n      );\n    }\n\n    if (\n      !letters.includes(row1) ||\n      typeof col1 !== 'number' ||\n      !Number.isInteger(col1) ||\n      col1 < 1 ||\n      col1 > 10 ||\n      ((row2 !== undefined || col2 !== undefined) &&\n        (!letters.includes(row2) ||\n          typeof col2 !== 'number' ||\n          !Number.isInteger(col2) ||\n          col2 < 1 ||\n          col2 > 10 ||\n          (row1 !== row2 && col1 !== col2)))\n    ) {\n      throw new Error(\n        \"Incorrect coordinates. Input must be in the form ([row1, col1], [row2, col2]), where row1, row2 are letters from A to J and col1, col2 are integers from 1 to 10. Ships must be places in one row or in one column, therefore if col1 isn't equal to col2, then row1 = row2, and if row1 isn't equal to row2, then col1 = col2.\",\n      );\n    }\n\n    let ship;\n\n    if (row2 === undefined && col2 === undefined) {\n      const row = this.rows[`${row1}`];\n      const col = col1;\n\n      const type = 'patrolBoat';\n\n      // Check if the square or the surrounding squares are occupied\n      for (let i = row1 - 1; i <= row1 + 1; i += 1) {\n        for (let j = col - 1; j <= col + 1; j += 1) {\n          if (\n            (this.rows[letters[i]] === undefined ||\n              this.rows[letters[i]][j - 1] === undefined) &&\n            j !== col1 - 1 &&\n            j !== col2 + 1 &&\n            i !== letters.indexOf(row1) - 1 &&\n            i !== letters.indexOf(row1) + 1\n          ) {\n            throw new Error('Incorrect positioning!');\n          }\n          if (\n            this.rows[letters[i]] !== undefined &&\n            this.rows[letters[i]][j - 1] !== undefined &&\n            this.rows[letters[i]][j - 1].occupiedBy !== null &&\n            this.rows[letters[i]][j - 1].occupiedBy.type !== type\n          ) {\n            throw new Error('Occupied!');\n          }\n        }\n      }\n\n      ship = this[type].instance;\n      const prevCoord = this[type].coords[0];\n      this.rows[prevCoord[0]][prevCoord[1] - 1].occupiedBy = null;\n      row[col - 1].occupiedBy = ship;\n      this[type].coords[0][0] = row1;\n      this[type].coords[0][1] = col;\n    } else if (row1 === row2) {\n      const row = this.rows[`${row1}`];\n\n      const length = col2 - col1 + 1;\n\n      let type;\n      switch (length) {\n        case 5:\n          type = 'carrier';\n          break;\n        case 4:\n          type = 'battleship';\n          break;\n        case 3:\n          type = 'destroyer';\n          break;\n        case 2:\n          type = 'submarine';\n          break;\n        case 1:\n          type = 'patrolBoat';\n          break;\n        default:\n        // do nothing\n      }\n\n      // Check if the squares are already occupied\n      for (let j = col1 - 1; j <= col2 + 1; j += 1) {\n        for (\n          let i = letters.indexOf(row1) - 1;\n          i <= letters.indexOf(row1) + 1;\n          i += 1\n        ) {\n          if (\n            (this.rows[letters[i]] === undefined ||\n              this.rows[letters[i]][j - 1] === undefined) &&\n            j !== col1 - 1 &&\n            j !== col2 + 1 &&\n            i !== letters.indexOf(row1) - 1 &&\n            i !== letters.indexOf(row1) + 1\n          ) {\n            throw new Error('Incorrect positioning!');\n          }\n          if (\n            this.rows[letters[i]] !== undefined &&\n            this.rows[letters[i]][j - 1] !== undefined &&\n            this.rows[letters[i]][j - 1].occupiedBy !== null &&\n            this.rows[letters[i]][j - 1].occupiedBy.type !== type\n          )\n            throw new Error('Occupied!');\n        }\n      }\n\n      const prevCoords = this[type].coords;\n      prevCoords.forEach((coord) => {\n        // eslint-disable-next-line no-shadow\n        const row = coord[0];\n        const col = coord[1] - 1;\n        this.rows[row][col].occupiedBy = null;\n      });\n\n      ship = this[type].instance;\n\n      for (let col = col1, i = 0; col <= col2; col += 1) {\n        row[col - 1].occupiedBy = ship;\n        this[type].coords[i][0] = row1;\n        this[type].coords[i][1] = col;\n        i += 1;\n      }\n    } else {\n      const col = col1;\n\n      const length = letters.indexOf(row2) - letters.indexOf(row1) + 1;\n\n      let type;\n      switch (length) {\n        case 5:\n          type = 'carrier';\n          break;\n        case 4:\n          type = 'battleship';\n          break;\n        case 3:\n          type = 'destroyer';\n          break;\n        case 2:\n          type = 'submarine';\n          break;\n        case 1:\n          type = 'patrolBoat';\n          break;\n        default:\n        // do nothing\n      }\n\n      // Check if the squares are already occupied\n      for (\n        let i = letters.indexOf(row1) - 1;\n        i <= letters.indexOf(row2) + 1;\n        i += 1\n      ) {\n        for (let j = col - 1; j <= col + 1; j += 1) {\n          /* if (\n            (this.rows[letters[i]] === undefined ||\n              this.rows[letters[i]][j - 1] === undefined) &&\n            j !== col1 - 1 &&\n            j !== col2 + 1 &&\n            i !== letters.indexOf(row1) - 1 &&\n            i !== letters.indexOf(row1) + 1\n          ) {\n            throw new Error('Incorrect positioning!');\n          } */\n          if (\n            this.rows[letters[i]] !== undefined &&\n            this.rows[letters[i]][j - 1] !== undefined &&\n            this.rows[letters[i]][j - 1].occupiedBy !== null &&\n            this.rows[letters[i]][j - 1].occupiedBy.type !== type\n          ) {\n            throw new Error('Occupied!');\n          }\n        }\n      }\n\n      const prevCoords = this[type].coords;\n      prevCoords.forEach((coord) => {\n        const row = coord[0];\n        // eslint-disable-next-line no-shadow\n        const col = coord[1] - 1;\n        this.rows[row][col].occupiedBy = null;\n      });\n\n      ship = this[type].instance;\n\n      for (\n        let row = letters.indexOf(row1), i = 0;\n        row <= letters.indexOf(row2);\n        row += 1\n      ) {\n        this.rows[letters[row]][col - 1].occupiedBy = ship;\n        this[type].coords[i][0] = letters[row];\n        this[type].coords[i][1] = col;\n        i += 1;\n      }\n    }\n\n    return ship;\n  };\n\n  #availableSquares = () => {\n    const allSquares = [];\n    let i = 0;\n    Object.values(this.rows).forEach((row) => {\n      for (let j = 0; j < row.length; j += 1) {\n        allSquares.push([letters[i], j + 1]);\n      }\n      i += 1;\n    });\n\n    const directlyUnavailableSquares = allSquares.filter(\n      (coord) =>\n        arrIncludes(this.carrierCoords, coord) ||\n        arrIncludes(this.battleshipCoords, coord) ||\n        arrIncludes(this.destroyerCoords, coord) ||\n        arrIncludes(this.submarineCoords, coord) ||\n        arrIncludes(this.patrolBoatCoords, coord),\n    );\n\n    const unavailableSquares = [];\n\n    directlyUnavailableSquares.forEach(([row, col]) => {\n      unavailableSquares.push([row, col]);\n\n      // eslint-disable-next-line no-shadow\n      const i = letters.indexOf(row);\n      const j = col;\n\n      if (i - 1 >= 0 && j - 1 >= 1) {\n        unavailableSquares.push([letters[i - 1], j - 1]);\n      }\n\n      if (i - 1 >= 0) {\n        unavailableSquares.push([letters[i - 1], j]);\n      }\n\n      if (i - 1 >= 0 && j + 1 <= 10) {\n        unavailableSquares.push([letters[i - 1], j + 1]);\n      }\n\n      if (j - 1 >= 1) {\n        unavailableSquares.push([letters[i], j - 1]);\n      }\n\n      if (j + 1 <= 10) {\n        unavailableSquares.push([letters[i], j + 1]);\n      }\n\n      if (i + 1 < 10 && j - 1 >= 1) {\n        unavailableSquares.push([letters[i + 1], j - 1]);\n      }\n\n      if (i + 1 < 10) {\n        unavailableSquares.push([letters[i + 1], j]);\n      }\n\n      if (i + 1 < 10 && j + 1 <= 10) {\n        unavailableSquares.push([letters[i + 1], j + 1]);\n      }\n    });\n\n    const availableSquares = allSquares.filter(\n      (coord) => !arrIncludes(unavailableSquares, coord),\n    );\n\n    return availableSquares;\n  };\n\n  openForPlacement = (coord1, coord2) => {\n    if (\n      coord2 !== undefined &&\n      !(coord1[0] === coord2[0] || coord1[1] === coord2[1])\n    ) {\n      throw new Error(\n        'Incorrect input! Arguments must be either one pair of coordinates or the first and the last pair of coordinates.',\n      );\n    }\n\n    let length;\n    if (coord2 !== undefined) {\n      length =\n        coord1[0] !== coord2[0]\n          ? letters.indexOf(coord2[0]) - letters.indexOf(coord1[0]) + 1\n          : coord2[1] - coord1[1] + 1;\n    } else {\n      length = 1;\n    }\n\n    let type;\n    switch (length) {\n      case 1:\n        type = 'patrolBoat';\n        break;\n      case 2:\n        type = 'submarine';\n        break;\n      case 3:\n        type = 'destroyer';\n        break;\n      case 4:\n        type = 'battleship';\n        break;\n      case 5:\n        type = 'carrier';\n        break;\n      default:\n      // do nothing\n    }\n\n    const contiguousAvailSqs = [];\n\n    const shipCoords = this[`${type}Coords`];\n    shipCoords.forEach((coord) => {\n      // eslint-disable-next-line no-shadow\n      const i = letters.indexOf(coord[0]);\n      const j = coord[1];\n\n      /* \n        Let's say we have this board:\n\n          1 2 3 4 5 6 7 8 9 10\n        A • • • • • • • • • +\n        B + • • • • • • • • •\n        C + • • + + + + • • • \n        D + • • • • • • • • •\n        E + • • • • • • • • •\n        F + • • • + • • • • •\n        G • • • • + • • + + •\n        H • • • • + • • • • •\n        I • • • • • • • • • •\n        J • • • • • • • • • •\n\n        shipCords = [['C', 4], ['C', 5], ['C', 6], ['C', 7]].\n\n        And we are currently on ['C', 4], i.e. coord = ['C', 4].\n\n        Then, the loop below will check all squares in the area (('A', 2), ('A', 6), ('E', 2), ('E', 6)):\n        \n          1 2 3 4 5 6 7 8 9 10\n        A • + + + + + • • • •\n        B • + + + + + • • • •\n        C • + + + + + • • • • \n        D • + + + + + • • • •\n        E • + + + + + • • • •\n        F • • • • • • • • • •\n        G • • • • • • • • • •\n        H • • • • • • • • • •\n        I • • • • • • • • • •\n        J • • • • • • • • • •\n\n        This is done to make sure that the method gives all available squares, including the squares surrounding the ship when there's no other ship close to it. \n\n        I fully realize the inefficiency of this algorithm. I'm planning on replacing it to something better in the future.\n      */\n      for (let row = i - 1; row <= i + 1; row += 1) {\n        if (row >= 0 && row <= 9) {\n          // eslint-disable-next-line no-restricted-syntax\n          target: for (let col = j - 1; col <= j + 1; col += 1) {\n            if (col >= 1 && col <= 10) {\n              for (let k = row - 1; k <= row + 1; k += 1) {\n                if (k < 0 || k > 9) continue;\n                for (let m = col - 1; m <= col + 1; m += 1) {\n                  if (m < 1 || m > 10 || (k === i && m === j)) continue;\n                  const letter = letters[k];\n                  const output = this.isOccupied(letter, m);\n\n                  if (output !== null && output !== this[type].instance) {\n                    // We are interested only in the surrounding the ship squares.\n                    continue target;\n                  }\n                }\n              }\n\n              contiguousAvailSqs.push([letters[row], col]);\n            }\n          }\n        }\n      }\n    });\n\n    const contigAvailSqsUnique = [];\n    contiguousAvailSqs.forEach((square) => {\n      if (!arrIncludes(contigAvailSqsUnique, square)) {\n        contigAvailSqsUnique.push(square);\n      }\n    });\n\n    const availableSquares = [\n      ...this.#availableSquares(),\n      ...contigAvailSqsUnique,\n    ];\n\n    if (coord2 !== undefined) {\n      for (\n        let i = letters.indexOf(coord1[0]);\n        i <= letters.indexOf(coord2[0]);\n        i += 1\n      ) {\n        for (let j = coord1[1]; j <= coord2[1]; j += 1) {\n          if (!arrIncludes(availableSquares, [letters[i], j])) {\n            return false;\n          }\n        }\n      }\n    } else if (!arrIncludes(availableSquares, [coord1[0], coord1[1]])) {\n      return false;\n    }\n\n    return true;\n  };\n\n  changeOrientation = (row, col) => {\n    const occupation = this.isOccupied(row, col);\n    if (occupation !== null) {\n      const shipType = occupation.type;\n\n      // Serialization is for making a deep copy of the array\n      const originalCoords = JSON.parse(\n        JSON.stringify(this[`${shipType}Coords`]),\n      );\n\n      // It's a patrol boat\n      if (originalCoords.length === 1) {\n        return null;\n      }\n\n      const newCoords = [];\n      // Horizontal orientation\n      if (originalCoords[0][0] === originalCoords[1][0]) {\n        const { length } = originalCoords;\n        const firstLetter = originalCoords[0][0];\n        const firstLetterIndex = letters.indexOf(firstLetter);\n        const j = originalCoords[0][1];\n\n        for (\n          let i = firstLetterIndex;\n          i <= firstLetterIndex + length - 1;\n          i += 1\n        ) {\n          newCoords.push([letters[i], j]);\n        }\n\n        this.changeShipPosition(newCoords[0], newCoords.at(-1));\n      } else if (originalCoords[0][1] === originalCoords[1][1]) {\n        const { length } = originalCoords;\n        const firstLetter = originalCoords[0][0];\n        const firstCol = originalCoords[0][1];\n\n        for (let j = firstCol; j <= firstCol + length - 1; j += 1) {\n          newCoords.push([firstLetter, j]);\n        }\n\n        this.changeShipPosition(newCoords[0], newCoords.at(-1));\n      }\n\n      return [originalCoords, newCoords];\n    }\n\n    return null;\n  };\n}\n","/* \n  3. Create a Player class/factory.\n\n    1. There will be two types of players in the game, ‘real’ players and ‘computer’ players.\n    \n    2. Each player object should contain its own gameboard.\n*/\n\nimport Gameboard from './Gameboard';\n\nexport default class Player {\n  constructor(name = 'Player') {\n    this.gameboard = new Gameboard();\n    this.name = name;\n  }\n\n  get hasLost() {\n    return this.gameboard.areAllSunk;\n  }\n\n  placeShip = (coord1, coord2) => this.gameboard.placeShip(coord1, coord2);\n\n  isOccupied = (row, col) => this.gameboard.isOccupied(row, col);\n\n  receiveAttack = (row, col) => this.gameboard.receiveAttack(row, col);\n\n  get isFleetFull() {\n    return this.gameboard.isFleetFull;\n  }\n\n  wasAttacked = (row, col) => this.gameboard.wasAttacked(row, col);\n\n  get isPatrolBoatSunk() {\n    return this.gameboard.isPatrolBoatSunk;\n  }\n\n  get wasPatrolBoatHit() {\n    return this.gameboard.wasPatrolBoatHit;\n  }\n\n  get patrolBoatCoords() {\n    return this.gameboard.patrolBoatCoords;\n  }\n\n  get isSubmarineSunk() {\n    return this.gameboard.isSubmarineSunk;\n  }\n\n  get wasSubmarineHit() {\n    return this.gameboard.wasSubmarineHit;\n  }\n\n  get submarineCoords() {\n    return this.gameboard.submarineCoords;\n  }\n\n  get isDestroyerSunk() {\n    return this.gameboard.isDestroyerSunk;\n  }\n\n  get wasDestroyerHit() {\n    return this.gameboard.wasDestroyerHit;\n  }\n\n  get destroyerCoords() {\n    return this.gameboard.destroyerCoords;\n  }\n\n  get isBattleshipSunk() {\n    return this.gameboard.isBattleshipSunk;\n  }\n\n  get wasBattleshipHit() {\n    return this.gameboard.wasBattleshipHit;\n  }\n\n  get battleshipCoords() {\n    return this.gameboard.battleshipCoords;\n  }\n\n  get isCarrierSunk() {\n    return this.gameboard.isCarrierSunk;\n  }\n\n  get wasCarrierHit() {\n    return this.gameboard.wasCarrierHit;\n  }\n\n  get carrierCoords() {\n    return this.gameboard.carrierCoords;\n  }\n\n  changeShipPosition = (coord1, coord2) =>\n    this.gameboard.changeShipPosition(coord1, coord2);\n\n  openForPlacement = (coord1, coord2) =>\n    this.gameboard.openForPlacement(coord1, coord2);\n\n  changeOrientation = (row, col) => this.gameboard.changeOrientation(row, col);\n}\n","import Player from './Player';\n\nexport default class Game {\n  constructor(name1 = 'Player1', name2 = 'Player2') {\n    this.playerOne = new Player(name1);\n    this.playerTwo = new Player(name2);\n    this.whoseTurn = this.playerOne;\n    this.winner = null;\n    this.howManyTurns = 0;\n  }\n\n  P1PlaceShip = (coord1, coord2) => this.playerOne.placeShip(coord1, coord2);\n\n  P2PlaceShip = (coord1, coord2) => this.playerTwo.placeShip(coord1, coord2);\n\n  #attackPlayerOne = (row, col) => this.playerOne.receiveAttack(row, col);\n\n  #attackPlayerTwo = (row, col) => this.playerTwo.receiveAttack(row, col);\n\n  makeTurn = (row, col) => {\n    if (this.isP1FleetFull && this.isP2FleetFull) {\n      if (this.winner === null) {\n        // if miss, it's null, if hit a ship, it's the ship object\n        let hitResult;\n\n        if (this.whoseTurn === this.playerOne) {\n          hitResult = this.#attackPlayerTwo(row, col);\n          this.howManyTurns += 1;\n\n          if (this.playerTwo.hasLost) {\n            this.winner = this.playerOne;\n          } else if (hitResult === null) {\n            this.whoseTurn = this.playerTwo;\n          }\n        } else if (this.whoseTurn === this.playerTwo) {\n          hitResult = this.#attackPlayerOne(row, col);\n          this.howManyTurns += 1;\n\n          if (this.playerOne.hasLost) {\n            this.winner = this.playerTwo;\n          } else if (hitResult === null) {\n            this.whoseTurn = this.playerOne;\n          }\n        }\n\n        return hitResult;\n      }\n      return this.winner !== null;\n    }\n    throw new Error('Incomplete fleet!');\n  };\n\n  isP1SqOccupied = (row, col) => this.playerOne.isOccupied(row, col);\n\n  isP2SqOccupied = (row, col) => this.playerTwo.isOccupied(row, col);\n\n  get P1Name() {\n    return this.playerOne.name;\n  }\n\n  get P2Name() {\n    return this.playerTwo.name;\n  }\n\n  get isP1FleetFull() {\n    return this.playerOne.isFleetFull;\n  }\n\n  get isP2FleetFull() {\n    return this.playerTwo.isFleetFull;\n  }\n\n  P1WasAttacked = (row, col) => this.playerOne.wasAttacked(row, col);\n\n  P2WasAttacked = (row, col) => this.playerTwo.wasAttacked(row, col);\n\n  get isP1PatrolBoatSunk() {\n    return this.playerOne.isPatrolBoatSunk;\n  }\n\n  get wasP1PatrolBoatHit() {\n    return this.playerOne.wasPatrolBoatHit;\n  }\n\n  get P1PatrolBoatCoords() {\n    return this.playerOne.patrolBoatCoords;\n  }\n\n  get isP2PatrolBoatSunk() {\n    return this.playerTwo.isPatrolBoatSunk;\n  }\n\n  get wasP2PatrolBoatHit() {\n    return this.playerTwo.wasPatrolBoatHit;\n  }\n\n  get P2PatrolBoatCoords() {\n    return this.playerTwo.patrolBoatCoords;\n  }\n\n  get isP1SubmarineSunk() {\n    return this.playerOne.isSubmarineSunk;\n  }\n\n  get wasP1SubmarineHit() {\n    return this.playerOne.wasSubmarineHit;\n  }\n\n  get P1SubmarineCoords() {\n    return this.playerOne.submarineCoords;\n  }\n\n  get isP2SubmarineSunk() {\n    return this.playerTwo.isSubmarineSunk;\n  }\n\n  get wasP2SubmarineHit() {\n    return this.playerTwo.wasSubmarineHit;\n  }\n\n  get P2SubmarineCoords() {\n    return this.playerTwo.submarineCoords;\n  }\n\n  get isP1DestroyerSunk() {\n    return this.playerOne.isDestroyerSunk;\n  }\n\n  get wasP1DestroyerHit() {\n    return this.playerOne.wasDestroyerHit;\n  }\n\n  get P1DestroyerCoords() {\n    return this.playerOne.destroyerCoords;\n  }\n\n  get isP2DestroyerSunk() {\n    return this.playerTwo.isDestroyerSunk;\n  }\n\n  get wasP2DestroyerHit() {\n    return this.playerTwo.wasDestroyerHit;\n  }\n\n  get P2DestroyerCoords() {\n    return this.playerTwo.destroyerCoords;\n  }\n\n  get isP1BattleshipSunk() {\n    return this.playerOne.isBattleshipSunk;\n  }\n\n  get wasP1BattleshipHit() {\n    return this.playerOne.wasBattleshipHit;\n  }\n\n  get P1BattleshipCoords() {\n    return this.playerOne.battleshipCoords;\n  }\n\n  get isP2BattleshipSunk() {\n    return this.playerTwo.isBattleshipSunk;\n  }\n\n  get wasP2BattleshipHit() {\n    return this.playerTwo.wasBattleshipHit;\n  }\n\n  get P2BattleshipCoords() {\n    return this.playerTwo.battleshipCoords;\n  }\n\n  get isP1CarrierSunk() {\n    return this.playerOne.isCarrierSunk;\n  }\n\n  get wasP1CarrierHit() {\n    return this.playerOne.wasCarrierHit;\n  }\n\n  get P1CarrierCoords() {\n    return this.playerOne.carrierCoords;\n  }\n\n  get isP2CarrierSunk() {\n    return this.playerTwo.isCarrierSunk;\n  }\n\n  get wasP2CarrierHit() {\n    return this.playerTwo.wasCarrierHit;\n  }\n\n  get P2CarrierCoords() {\n    return this.playerTwo.carrierCoords;\n  }\n\n  P1ChangeShipPosition = (coord1, coord2) => {\n    if (this.howManyTurns === 0) {\n      return this.playerOne.changeShipPosition(coord1, coord2);\n    }\n    throw new Error('Game has already begun!');\n  };\n\n  P2ChangeShipPosition = (coord1, coord2) => {\n    if (this.howManyTurns === 0) {\n      return this.playerTwo.changeShipPosition(coord1, coord2);\n    }\n    throw new Error('Game has already begun!');\n  };\n\n  P1OpenForPlacement = (coord1, coord2) =>\n    this.playerOne.openForPlacement(coord1, coord2);\n\n  P2OpenForPlacement = (coord1, coord2) =>\n    this.playerTwo.openForPlacement(coord1, coord2);\n\n  P1ChangeOrientation = (row, col) =>\n    this.playerOne.changeOrientation(row, col);\n\n  P2ChangeOrientation = (row, col) =>\n    this.playerTwo.changeOrientation(row, col);\n}\n","/* eslint-disable no-loop-func */\nimport './style.css';\nimport Game from './modules/Game';\n\nconst initialForm = document.querySelector('form');\nconst boards = document.querySelector('.boards');\nconst playerOneLabel = document.querySelector('.player-one h2');\nconst playerTwoLabel = document.querySelector('.player-two h2');\n\nconst whoseTurnWrapper = document.querySelector('.turn-wrapper');\nconst whoseTurnDOM = document.querySelector('.turn');\nconst handoverDialogOne = document.querySelector('#hand-over-one');\nconst handoverDialogOneEnemy = document.querySelector('#hand-over-one-enemy');\nconst handoverDialogTwo = document.querySelector('#hand-over-two');\nconst handoverDialogTwoEnemy = document.querySelector('#hand-over-two-enemy');\nconst playerOneBoard = document.querySelector('.player-one .board');\nconst playerOneBoardEnemy = document.querySelector('.player-one .board-enemy');\nconst playerOneRows = document.querySelectorAll('.player-one .board .row');\nconst playerOneRowsEnemy = document.querySelectorAll(\n  '.player-one .board-enemy .row',\n);\nconst playerTwoBoard = document.querySelector('.player-two .board');\nconst playerTwoBoardEnemy = document.querySelector('.player-two .board-enemy');\nconst playerTwoRows = document.querySelectorAll('.player-two .board .row');\nconst playerTwoRowsEnemy = document.querySelectorAll(\n  '.player-two .board-enemy .row',\n);\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n\n// Logic for hiding player boards correctly when they place their ships before the game begins\nlet P1Ready = false;\nlet P2Ready = false;\n\nconst P1ReadyDialog = document.querySelector('#ready-two');\nconst P2ReadyDialog = document.querySelector('#ready-one');\nP1ReadyDialog.addEventListener('close', () => {\n  P1Ready = true;\n  playerTwoBoardEnemy.style.display = 'none';\n  handoverDialogTwo.show();\n  playerTwoBoard.style.display = 'flex';\n  P2ReadyDialog.show();\n  for (let i = 0; i < 10; i += 1) {\n    const row = playerOneRows[i].querySelectorAll('.square');\n\n    for (let j = 0; j < 10; j += 1) {\n      row[j].removeAttribute('draggable');\n    }\n  }\n});\nP2ReadyDialog.addEventListener('close', () => {\n  P2Ready = true;\n  playerTwoBoard.style.display = 'none';\n  handoverDialogOne.show();\n  playerTwoBoardEnemy.style.display = 'flex';\n\n  for (let i = 0; i < 10; i += 1) {\n    const row = playerTwoRows[i].querySelectorAll('.square');\n\n    for (let j = 0; j < 10; j += 1) {\n      row[j].removeAttribute('draggable');\n    }\n  }\n});\n\nlet isOutOfBoundary;\n\nfunction initialize(playerOneName, playerTwoName) {\n  const game = new Game(playerOneName, playerTwoName);\n\n  game.P1PlaceShip(['B', 1], ['F', 1]);\n  game.P1PlaceShip(['C', 4], ['C', 7]);\n  game.P1PlaceShip(['E', 3], ['E', 5]);\n  game.P1PlaceShip(['G', 6], ['H', 6]);\n  game.P1PlaceShip(['J', 4]);\n\n  game.P2PlaceShip(['B', 1], ['F', 1]);\n  game.P2PlaceShip(['C', 4], ['C', 7]);\n  game.P2PlaceShip(['E', 3], ['E', 5]);\n  game.P2PlaceShip(['G', 6], ['H', 6]);\n  game.P2PlaceShip(['J', 4]);\n\n  // A workaround for a `dragenter` event handler below. It's necessary because you can't read the `dataTransfer` object data in anything but `dragstart` and `drop` event handlers.\n  let currentlyDragged = null;\n  let currentlyDraggedOver = null;\n\n  // row and col like on the board\n  function addP1DragEventListener(element, row, col) {\n    function dragHandler(e) {\n      if (!P1Ready) {\n        const dataList = e.dataTransfer;\n\n        const { type, length } = game.isP1SqOccupied(row, col);\n\n        const coords =\n          game[`P1${type.replace(/^./, type.at(0).toUpperCase())}Coords`];\n\n        // If letters are the same for the squares, the ship's positioned horizontally; otherwise, vertically. Patrol boats (one square long) are treated as horizontal by convention.\n        const orientation =\n          coords.length === 1 || coords[0][0] === coords[1][0]\n            ? 'horizontal'\n            : 'vertical';\n\n        // Part of data to be sent\n        const data = [length, orientation];\n\n        // Create drag image\n        const dragClone = document.createElement('div');\n        const sizeKey = orientation === 'horizontal' ? 'height' : 'width';\n        dragClone.style.display = 'flex';\n        dragClone.style.flexDirection =\n          orientation === 'horizontal' ? 'row' : 'column';\n        dragClone.style[sizeKey] = '3rem';\n        dragClone.style.marginLeft = '150vw';\n\n        // Clone the ship's squares and append the created clones to the parent dragClone, then remove the 'occupied' class from the original squares to represent visually that the ship is moved from the squares. The count and index are for calculating the offsets below. originalSquares is to be transferred.\n        let count = 0;\n        let index = 0;\n\n        const originalSquares = [];\n        const originalSquareNodes = [];\n\n        coords.forEach((coord) => {\n          const i = letters.indexOf(coord[0]);\n          const j = coord[1] - 1;\n          const squares = playerOneRows[i].querySelectorAll('.square');\n          const square = squares[j];\n          originalSquareNodes.push(square);\n          originalSquares.push([i, j]);\n          if (square === e.target) index = count;\n          const squareClone = square.cloneNode(true);\n          dragClone.appendChild(squareClone);\n          square.setAttribute('class', 'square');\n          count += 1;\n        });\n\n        currentlyDragged = [...data, index, originalSquareNodes];\n        data.push(index, originalSquares);\n        dataList.setData('text/plain', JSON.stringify(data));\n\n        // Calculate offsets for drag image\n        const rect = e.target.getBoundingClientRect();\n        let offsetX = e.clientX - rect.left;\n        let offsetY = e.clientY - rect.top;\n        const rem = getComputedStyle(e.target)\n          .getPropertyValue('font-size')\n          .replace('px', '');\n        if (orientation === 'horizontal') {\n          offsetX += index * 3 * rem;\n        } else {\n          offsetY += index * 3 * rem;\n        }\n\n        document.body.appendChild(dragClone);\n        dataList.setDragImage(dragClone, offsetX, offsetY);\n      }\n    }\n    // eslint-disable-next-line no-param-reassign\n    element.ondragstart = dragHandler;\n  }\n\n  // row and col like on the board\n  function addP2DragEventListener(element, row, col) {\n    function dragHandler(e) {\n      if (!P2Ready) {\n        const dataList = e.dataTransfer;\n\n        const { type, length } = game.isP2SqOccupied(row, col);\n\n        const coords =\n          game[`P2${type.replace(/^./, type.at(0).toUpperCase())}Coords`];\n\n        // If letters are the same for the squares, the ship's positioned horizontally; otherwise, vertically. Patrol boats (one square long) are treated as horizontal by convention.\n        const orientation =\n          coords.length === 1 || coords[0][0] === coords[1][0]\n            ? 'horizontal'\n            : 'vertical';\n\n        // Part of data to be sent\n        const data = [length, orientation];\n\n        // Create drag image\n        const dragClone = document.createElement('div');\n        const sizeKey = orientation === 'horizontal' ? 'height' : 'width';\n        dragClone.style.display = 'flex';\n        dragClone.style.flexDirection =\n          orientation === 'horizontal' ? 'row' : 'column';\n        dragClone.style[sizeKey] = '3rem';\n        dragClone.style.marginLeft = '150vw';\n\n        // Clone the ship's squares and append the created clones to the parent dragClone, then remove the 'occupied' class from the original squares to represent visually that the ship is moved from the squares. The count and index are for calculating the offsets below. originalSquares is to be transferred.\n        let count = 0;\n        let index = 0;\n\n        const originalSquares = [];\n        const originalSquareNodes = [];\n\n        coords.forEach((coord) => {\n          const i = letters.indexOf(coord[0]);\n          const j = coord[1] - 1;\n          const squares = playerTwoRows[i].querySelectorAll('.square');\n          const square = squares[j];\n          originalSquareNodes.push(square);\n          originalSquares.push([i, j]);\n          if (square === e.target) index = count;\n          const squareClone = square.cloneNode(true);\n          dragClone.appendChild(squareClone);\n          square.setAttribute('class', 'square');\n          count += 1;\n        });\n\n        currentlyDragged = [...data, index, originalSquareNodes];\n        data.push(index, originalSquares);\n        dataList.setData('text/plain', JSON.stringify(data));\n\n        // Calculate offsets for drag image\n        const rect = e.target.getBoundingClientRect();\n        let offsetX = e.clientX - rect.left;\n        let offsetY = e.clientY - rect.top;\n        const rem = getComputedStyle(e.target)\n          .getPropertyValue('font-size')\n          .replace('px', '');\n        if (orientation === 'horizontal') {\n          offsetX += index * 3 * rem;\n        } else {\n          offsetY += index * 3 * rem;\n        }\n\n        document.body.appendChild(dragClone);\n        dataList.setDragImage(dragClone, offsetX, offsetY);\n      }\n    }\n    // eslint-disable-next-line no-param-reassign\n    element.ondragstart = dragHandler;\n  }\n\n  for (let i = 0; i < 10; i += 1) {\n    const letter = letters[i];\n    const playerOneRow = playerOneRows[i].querySelectorAll('.square');\n    const playerOneRowEnemy = playerOneRowsEnemy[i].querySelectorAll('.square');\n    const playerTwoRow = playerTwoRows[i].querySelectorAll('.square');\n    const playerTwoRowEnemy = playerTwoRowsEnemy[i].querySelectorAll('.square');\n\n    for (let j = 0; j < 10; j += 1) {\n      // Drag-and-drop functionality\n      playerOneRow[j].addEventListener('dragover', (e) => {\n        if (!P1Ready) {\n          e.preventDefault();\n        }\n      });\n\n      playerOneRow[j].addEventListener('dragenter', (e) => {\n        if (!P1Ready) {\n          e.preventDefault();\n\n          // currentlyDragged = [length, orientation, index in the array of ship squares, [...original squares as nodes]]\n          if (currentlyDragged === null) return;\n          const [shipLength, orientation, index] = currentlyDragged;\n\n          const newSquares = [];\n          // As on the board ('A', 3; 'B', 1 etc.)\n          const newCoords = [];\n\n          if (orientation === 'horizontal') {\n            // Check for not sticking out of the board's boundaries\n            for (let k = j - index; k < j - index + shipLength; k += 1) {\n              if (k > 9 || k < 0) return;\n            }\n\n            for (let k = j - index; k < j - index + shipLength; k += 1) {\n              newSquares.push(playerOneRow[k]);\n              newCoords.push([letter, k + 1]);\n            }\n          } else {\n            // Check for not sticking out of the board's boundaries\n            for (let l = i - index; l < i - index + shipLength; l += 1) {\n              if (l > 9 || l < 0) return;\n            }\n\n            for (let l = i - index; l < i - index + shipLength; l += 1) {\n              newSquares.push(playerOneRows[l].querySelectorAll('.square')[j]);\n              newCoords.push([letters[l], j + 1]);\n            }\n          }\n\n          currentlyDraggedOver = [[...newSquares], [...newCoords]];\n\n          if (game.P1OpenForPlacement(newCoords[0], newCoords.at(-1))) {\n            newSquares.forEach((square) => {\n              square.classList.add('available');\n            });\n          }\n        }\n      });\n\n      playerOneRow[j].addEventListener('dragleave', (e) => {\n        e.preventDefault();\n\n        // currentlyDragged = [length, orientation, index in the array of ship squares, [...original squares as nodes]]\n        if (currentlyDragged === null) return;\n        const [shipLength, orientation, index] = currentlyDragged;\n\n        const leftSquares = [];\n\n        if (orientation === 'horizontal') {\n          // Check for not sticking out of the board's boundaries\n          for (let k = j - index; k < j - index + shipLength; k += 1) {\n            if (k > 9 || k < 0) {\n              isOutOfBoundary = true;\n              return;\n            }\n          }\n\n          for (let k = j - index; k < j - index + shipLength; k += 1) {\n            leftSquares.push(playerOneRow[k]);\n          }\n        } else {\n          // Check for not sticking out of the board's boundaries\n          for (let l = i - index; l < i - index + shipLength; l += 1) {\n            if (l > 9 || l < 0) {\n              isOutOfBoundary = true;\n              return;\n            }\n          }\n\n          for (let l = i - index; l < i - index + shipLength; l += 1) {\n            leftSquares.push(playerOneRows[l].querySelectorAll('.square')[j]);\n          }\n        }\n\n        const sqsCurDraggedOver = currentlyDraggedOver[0];\n        const curDraggedOverCoords = currentlyDraggedOver[1];\n\n        // This is for the case when a dragged ship has just met a boundary\n        let boundary = true;\n        isOutOfBoundary = true;\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const square of leftSquares) {\n          if (!sqsCurDraggedOver.includes(square)) {\n            boundary = false;\n            isOutOfBoundary = false;\n            break;\n          }\n        }\n\n        if (boundary) {\n          leftSquares.forEach((square) => square.classList.remove('available'));\n        } else if (\n          !game.P1OpenForPlacement(\n            curDraggedOverCoords[0],\n            curDraggedOverCoords.at(-1),\n          )\n        ) {\n          // eslint-disable-next-line no-shadow\n          for (let i = 0; i < leftSquares.length; i += 1) {\n            leftSquares[i].classList.remove('available');\n            if (!leftSquares.includes(sqsCurDraggedOver[i])) {\n              sqsCurDraggedOver[i].classList.remove('available');\n            }\n          }\n        } else {\n          leftSquares.forEach((square) => {\n            if (!sqsCurDraggedOver.includes(square)) {\n              square.classList.remove('available');\n            }\n          });\n        }\n      });\n\n      playerOneRow[j].addEventListener('drop', (e) => {\n        if (!P1Ready) {\n          e.preventDefault();\n\n          let shipLength;\n          let orientation;\n          let index;\n          let originalSquareCoords;\n          let originalSquares;\n\n          try {\n            // [length, orientation, index in the array of ship squares, [...original squares' IDs]]\n            [shipLength, orientation, index, originalSquareCoords] = JSON.parse(\n              e.dataTransfer.getData('text/plain'),\n            );\n            originalSquares = originalSquareCoords.map(\n              (coord) =>\n                playerOneRows[coord[0]].querySelectorAll('.square')[coord[1]],\n            );\n          } catch {\n            return;\n          }\n\n          try {\n            const newSquares = [];\n            // As on the board ('A', 3; 'B', 1 etc.)\n            const newCoords = [];\n\n            if (orientation === 'horizontal') {\n              for (let k = j - index; k < j - index + shipLength; k += 1) {\n                newSquares.push(playerOneRow[k]);\n                newCoords.push([letter, k + 1]);\n              }\n            } else {\n              for (let l = i - index; l < i - index + shipLength; l += 1) {\n                newSquares.push(\n                  playerOneRows[l].querySelectorAll('.square')[j],\n                );\n                newCoords.push([letters[l], j + 1]);\n              }\n            }\n\n            // If this method throws, the dragging should be reversed\n            game.P1ChangeShipPosition(newCoords[0], newCoords.at(-1));\n\n            originalSquares.forEach((square) => {\n              // eslint-disable-next-line no-param-reassign\n              square.ondragstart = null;\n              square.setAttribute('draggable', 'false');\n            });\n\n            // eslint-disable-next-line no-shadow\n            newSquares.forEach((square, index) => {\n              const coordOnBoard = newCoords[index];\n              square.classList.add('occupied');\n              square.setAttribute('draggable', 'true');\n              addP1DragEventListener(square, coordOnBoard[0], coordOnBoard[1]);\n            });\n          } catch {\n            originalSquares.forEach((square) =>\n              square.classList.add('occupied'),\n            );\n          }\n        }\n      });\n\n      playerOneRow[j].addEventListener('dragend', (e) => {\n        e.preventDefault();\n\n        // currentlyDragged = [length, orientation, index in the array of ship squares, [...original squares as nodes]]\n        if (currentlyDragged === null) return;\n        const originalSquares = currentlyDragged[3];\n\n        // if the user tries to put the ship in incorrect place\n        if (isOutOfBoundary)\n          originalSquares.forEach((square) => square.classList.add('occupied'));\n\n        currentlyDragged = null;\n        currentlyDraggedOver = null;\n        isOutOfBoundary = false;\n      });\n\n      if (game.isP1SqOccupied(letter, j + 1)) {\n        playerOneRow[j].setAttribute('draggable', 'true');\n        addP1DragEventListener(playerOneRow[j], letter, j + 1);\n      }\n\n      // The rest of logic (not drag and drop)\n      if (game.isP1SqOccupied(letter, j + 1)) {\n        playerOneRow[j].classList.add('occupied');\n      }\n\n      playerOneRow[j].addEventListener('click', () => {\n        if (!P1Ready && playerOneRow[j].classList.contains('occupied')) {\n          try {\n            // It outputs original coords and new coords. If it throws, it's impossible to change the orientation of the ship.\n            const output = game.P1ChangeOrientation(letter, j + 1);\n            const originalCoords = output[0];\n            const newCoords = output[1];\n            const originalSquares = originalCoords.map((coord) => {\n              const row = letters.indexOf(coord[0]);\n              const col = coord[1] - 1;\n\n              return playerOneRows[row].querySelectorAll('.square')[col];\n            });\n            const newSquares = newCoords.map((coord) => {\n              const row = letters.indexOf(coord[0]);\n              const col = coord[1] - 1;\n\n              return playerOneRows[row].querySelectorAll('.square')[col];\n            });\n\n            originalSquares.forEach((square) => {\n              // eslint-disable-next-line no-param-reassign\n              square.ondragstart = null;\n              square.setAttribute('draggable', 'false');\n              square.classList.remove('occupied', 'available');\n            });\n\n            newSquares.forEach((square, index) => {\n              const coordOnBoard = newCoords[index];\n              square.classList.add('occupied');\n              square.setAttribute('draggable', 'true');\n              addP1DragEventListener(square, coordOnBoard[0], coordOnBoard[1]);\n            });\n          } catch {\n            // Trigger some animation\n          }\n        }\n      });\n\n      playerOneRowEnemy[j].addEventListener('click', () => {\n        if (game.whoseTurn === game.playerTwo && game.winner === null) {\n          try {\n            const output = game.makeTurn(letter, j + 1);\n            if (output === null) {\n              playerOneRow[j].classList.add('missed');\n              playerOneRowEnemy[j].classList.add('missed');\n            } else if (typeof output === 'object') {\n              playerOneRow[j].classList.add('hit');\n              playerOneRowEnemy[j].classList.add('hit');\n              // If a ship was hit, the output of makeTurn is the ship that was hit\n              if (output.isSunk) {\n                // submarine => P2SubmarineCoords\n                const coords =\n                  game[\n                    `P1${output.type.replace(/^./, output.type.at(0).toUpperCase())}Coords`\n                  ];\n                coords.forEach((coord) => {\n                  playerOneRows[letters.indexOf(coord[0])].children[\n                    coord[1]\n                  ].classList.add('sunk');\n                  playerOneRowsEnemy[letters.indexOf(coord[0])].children[\n                    coord[1]\n                  ].classList.add('sunk');\n                });\n              }\n            }\n\n            if (game.winner !== null) {\n              whoseTurnWrapper.textContent = `${playerTwoName} wins!`;\n            }\n\n            if (game.whoseTurn !== game.playerTwo) {\n              playerOneBoardEnemy.style.display = 'none';\n\n              if (game.winner === null) {\n                handoverDialogOne.show();\n                whoseTurnDOM.textContent = playerOneName;\n                playerTwoBoard.style.display = 'none';\n                playerTwoBoardEnemy.style.display = 'flex';\n              }\n\n              playerOneBoard.style.display = 'flex';\n            }\n          } catch (error) {\n            // Implement some kind of logic to explain to the user that you can't hit twice the same square, if he/she tries to click more than one time, like 5 times or more.\n          }\n        }\n      });\n\n      // Drag-and-drop functionality\n      playerTwoRow[j].addEventListener('dragover', (e) => {\n        if (!P2Ready) {\n          e.preventDefault();\n        }\n      });\n\n      playerTwoRow[j].addEventListener('dragenter', (e) => {\n        if (!P2Ready) {\n          e.preventDefault();\n\n          // currentlyDragged = [length, orientation, index in the array of ship squares, [...original squares' IDs]]\n          if (currentlyDragged === null) return;\n          const [shipLength, orientation, index] = currentlyDragged;\n\n          const newSquares = [];\n          // As on the board ('A', 3; 'B', 1 etc.)\n          const newCoords = [];\n\n          if (orientation === 'horizontal') {\n            // Check for not sticking out of the board's boundaries\n            for (let k = j - index; k < j - index + shipLength; k += 1) {\n              if (k > 9 || k < 0) return;\n            }\n\n            for (let k = j - index; k < j - index + shipLength; k += 1) {\n              newSquares.push(playerTwoRow[k]);\n              newCoords.push([letter, k + 1]);\n            }\n          } else {\n            // Check for not sticking out of the board's boundaries\n            for (let l = i - index; l < i - index + shipLength; l += 1) {\n              if (l > 9 || l < 0) return;\n            }\n\n            for (let l = i - index; l < i - index + shipLength; l += 1) {\n              newSquares.push(playerTwoRows[l].querySelectorAll('.square')[j]);\n              newCoords.push([letters[l], j + 1]);\n            }\n          }\n\n          currentlyDraggedOver = [[...newSquares], [...newCoords]];\n\n          if (game.P2OpenForPlacement(newCoords[0], newCoords.at(-1))) {\n            newSquares.forEach((square) => {\n              square.classList.add('available');\n            });\n          }\n        }\n      });\n\n      playerTwoRow[j].addEventListener('dragleave', (e) => {\n        e.preventDefault();\n\n        // currentlyDragged = [length, orientation, index in the array of ship squares, [...original squares' IDs]]\n        if (currentlyDragged === null) return;\n        const [shipLength, orientation, index] = currentlyDragged;\n\n        const leftSquares = [];\n\n        if (orientation === 'horizontal') {\n          // Check for not sticking out of the board's boundaries\n          for (let k = j - index; k < j - index + shipLength; k += 1) {\n            if (k > 9 || k < 0) {\n              isOutOfBoundary = true;\n              return;\n            }\n          }\n\n          for (let k = j - index; k < j - index + shipLength; k += 1) {\n            leftSquares.push(playerTwoRow[k]);\n          }\n        } else {\n          // Check for not sticking out of the board's boundaries\n          for (let l = i - index; l < i - index + shipLength; l += 1) {\n            if (l > 9 || l < 0) {\n              isOutOfBoundary = true;\n              return;\n            }\n          }\n\n          for (let l = i - index; l < i - index + shipLength; l += 1) {\n            leftSquares.push(playerTwoRows[l].querySelectorAll('.square')[j]);\n          }\n        }\n\n        const sqsCurDraggedOver = currentlyDraggedOver[0];\n        const curDraggedOverCoords = currentlyDraggedOver[1];\n\n        // This is for the case when a dragged ship has just met a boundary\n        let boundary = true;\n        isOutOfBoundary = true;\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const square of leftSquares) {\n          if (!sqsCurDraggedOver.includes(square)) {\n            boundary = false;\n            isOutOfBoundary = false;\n            break;\n          }\n        }\n\n        if (boundary) {\n          leftSquares.forEach((square) => square.classList.remove('available'));\n        } else if (\n          !game.P2OpenForPlacement(\n            curDraggedOverCoords[0],\n            curDraggedOverCoords.at(-1),\n          )\n        ) {\n          // eslint-disable-next-line no-shadow\n          for (let i = 0; i < leftSquares.length; i += 1) {\n            leftSquares[i].classList.remove('available');\n            if (!leftSquares.includes(sqsCurDraggedOver[i])) {\n              sqsCurDraggedOver[i].classList.remove('available');\n            }\n          }\n        } else {\n          leftSquares.forEach((square) => {\n            if (!sqsCurDraggedOver.includes(square)) {\n              square.classList.remove('available');\n            }\n          });\n        }\n      });\n\n      playerTwoRow[j].addEventListener('drop', (e) => {\n        if (!P2Ready) {\n          e.preventDefault();\n\n          let shipLength;\n          let orientation;\n          let index;\n          let originalSquareCoords;\n          let originalSquares;\n\n          try {\n            // [length, orientation, index in the array of ship squares, [...original squares' IDs]]\n            [shipLength, orientation, index, originalSquareCoords] = JSON.parse(\n              e.dataTransfer.getData('text/plain'),\n            );\n            originalSquares = originalSquareCoords.map(\n              (coord) =>\n                playerTwoRows[coord[0]].querySelectorAll('.square')[coord[1]],\n            );\n          } catch {\n            return;\n          }\n\n          try {\n            const newSquares = [];\n            // As on the board ('A', 3; 'B', 1 etc.)\n            const newCoords = [];\n\n            if (orientation === 'horizontal') {\n              for (let k = j - index; k < j - index + shipLength; k += 1) {\n                newSquares.push(playerTwoRow[k]);\n                newCoords.push([letter, k + 1]);\n              }\n            } else {\n              for (let l = i - index; l < i - index + shipLength; l += 1) {\n                newSquares.push(\n                  playerTwoRows[l].querySelectorAll('.square')[j],\n                );\n                newCoords.push([letters[l], j + 1]);\n              }\n            }\n\n            // If this method throws, the dragging should be reversed\n            game.P2ChangeShipPosition(newCoords[0], newCoords.at(-1));\n\n            originalSquares.forEach((square) => {\n              // eslint-disable-next-line no-param-reassign\n              square.ondragstart = null;\n              square.setAttribute('draggable', 'false');\n            });\n\n            // eslint-disable-next-line no-shadow\n            newSquares.forEach((square, index) => {\n              const coordOnBoard = newCoords[index];\n              square.classList.add('occupied');\n              addP2DragEventListener(square, coordOnBoard[0], coordOnBoard[1]);\n            });\n          } catch {\n            originalSquares.forEach((square) =>\n              square.classList.add('occupied'),\n            );\n          }\n        }\n      });\n\n      playerTwoRow[j].addEventListener('dragend', (e) => {\n        e.preventDefault();\n\n        // currentlyDragged = [length, orientation, index in the array of ship squares, [...original squares as nodes]]\n        if (currentlyDragged === null) return;\n        const originalSquares = currentlyDragged[3];\n\n        // if the user tries to put the ship in incorrect place\n        if (isOutOfBoundary)\n          originalSquares.forEach((square) => square.classList.add('occupied'));\n\n        currentlyDragged = null;\n        currentlyDraggedOver = null;\n        isOutOfBoundary = false;\n      });\n\n      if (game.isP2SqOccupied(letter, j + 1)) {\n        playerTwoRow[j].setAttribute('draggable', 'true');\n        addP2DragEventListener(playerTwoRow[j], letter, j + 1);\n      }\n\n      // The rest of logic (not drag and drop)\n      if (game.isP2SqOccupied(letter, j + 1)) {\n        playerTwoRow[j].classList.add('occupied');\n      }\n\n      playerTwoRow[j].addEventListener('click', () => {\n        if (!P2Ready && playerTwoRow[j].classList.contains('occupied')) {\n          try {\n            // It outputs original coords and new coords. If it throws, it's impossible to change the orientation of the ship.\n            const output = game.P2ChangeOrientation(letter, j + 1);\n            const originalCoords = output[0];\n            const newCoords = output[1];\n            const originalSquares = originalCoords.map((coord) => {\n              const row = letters.indexOf(coord[0]);\n              const col = coord[1] - 1;\n\n              return playerTwoRows[row].querySelectorAll('.square')[col];\n            });\n            const newSquares = newCoords.map((coord) => {\n              const row = letters.indexOf(coord[0]);\n              const col = coord[1] - 1;\n\n              return playerTwoRows[row].querySelectorAll('.square')[col];\n            });\n\n            originalSquares.forEach((square) => {\n              // eslint-disable-next-line no-param-reassign\n              square.ondragstart = null;\n              square.setAttribute('draggable', 'false');\n              square.classList.remove('occupied', 'available');\n            });\n\n            newSquares.forEach((square, index) => {\n              const coordOnBoard = newCoords[index];\n              square.classList.add('occupied');\n              square.setAttribute('draggable', 'true');\n              addP2DragEventListener(square, coordOnBoard[0], coordOnBoard[1]);\n            });\n          } catch {\n            // Trigger some animation\n          }\n        }\n      });\n\n      playerTwoRowEnemy[j].addEventListener('click', () => {\n        if (game.whoseTurn === game.playerOne && game.winner === null) {\n          try {\n            const output = game.makeTurn(letter, j + 1);\n            if (output === null) {\n              playerTwoRow[j].classList.add('missed');\n              playerTwoRowEnemy[j].classList.add('missed');\n            } else if (typeof output === 'object') {\n              playerTwoRow[j].classList.add('hit');\n              playerTwoRowEnemy[j].classList.add('hit');\n              // If a ship was hit, the output of makeTurn is the ship that was hit\n              if (output.isSunk) {\n                // submarine => P2SubmarineCoords\n                const coords =\n                  game[\n                    `P2${output.type.replace(/^./, output.type.at(0).toUpperCase())}Coords`\n                  ];\n                coords.forEach((coord) => {\n                  playerTwoRows[letters.indexOf(coord[0])].children[\n                    coord[1]\n                  ].classList.add('sunk');\n                  playerTwoRowsEnemy[letters.indexOf(coord[0])].children[\n                    coord[1]\n                  ].classList.add('sunk');\n                });\n              }\n            }\n\n            if (game.winner !== null) {\n              whoseTurnWrapper.textContent = `${playerOneName} wins!`;\n            }\n\n            if (game.whoseTurn !== game.playerOne) {\n              playerTwoBoardEnemy.style.display = 'none';\n\n              if (game.winner === null) {\n                handoverDialogTwo.show();\n                whoseTurnDOM.textContent = playerTwoName;\n                playerOneBoard.style.display = 'none';\n                playerOneBoardEnemy.style.display = 'flex';\n              }\n\n              playerTwoBoard.style.display = 'flex';\n            }\n          } catch (error) {\n            // Implement some kind of logic to explain to the user that you can't hit twice the same square, if he/she tries to click more than one time, like 5 times or more.\n          }\n        }\n      });\n    }\n  }\n}\n\ninitialForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n  const playerOneNameInput = initialForm.querySelector('#name-one');\n  const playerOneName = playerOneNameInput.value;\n  const playerTwoNameInput = initialForm.querySelector('#name-two');\n  const playerTwoName = playerTwoNameInput.value;\n  initialForm.style.display = 'none';\n  playerOneLabel.textContent = playerOneName;\n  playerTwoLabel.textContent = playerTwoName;\n  boards.style = null;\n  whoseTurnWrapper.style = null;\n  whoseTurnDOM.textContent = playerOneName;\n  initialize(playerOneName, playerTwoName);\n  P1ReadyDialog.show();\n});\n"],"names":["module","exports","styleElement","nonce","setAttribute","stylesInDOM","getIndexByIdentifier","identifier","result","i","length","modulesToDom","list","options","idCountMap","identifiers","item","id","base","count","concat","indexByIdentifier","obj","css","media","sourceMap","supports","layer","references","updater","addElementStyle","byIndex","splice","push","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","styleSheet","cssText","firstChild","removeChild","appendChild","document","createTextNode","___CSS_LOADER_EXPORT___","cssWithMappingToString","toString","this","map","content","needLayer","join","modules","dedupe","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","element","createElement","setAttributes","attributes","insert","memo","style","target","styleTarget","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","insertStyleElement","styleTagTransform","apply","parentNode","removeStyleElement","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","nc","locals","Battleship","constructor","Number","isInteger","TypeError","hits","hit","isSunk","wasHit","type","letters","arrIncludes","array","coord","filter","arrCoord","Gameboard","rows","row","j","occupiedBy","misses","carrier","instance","coords","battleship","destroyer","submarine","patrolBoat","placeShip","coord1","coord2","Array","isArray","row1","col1","row2","col2","ship","includes","col","indexOf","isOccupied","receiveAttack","occupation","areAllSunk","isFleetFull","wasAttacked","isPatrolBoatSunk","wasPatrolBoatHit","isSubmarineSunk","wasSubmarineHit","isDestroyerSunk","wasDestroyerHit","isBattleshipSunk","wasBattleshipHit","isCarrierSunk","wasCarrierHit","patrolBoatCoords","submarineCoords","destroyerCoords","battleshipCoords","carrierCoords","changeShipPosition","prevCoord","forEach","allSquares","values","directlyUnavailableSquares","unavailableSquares","openForPlacement","contiguousAvailSqs","m","letter","output","contigAvailSqsUnique","square","availableSquares","changeOrientation","shipType","originalCoords","parse","newCoords","firstLetter","firstLetterIndex","at","firstCol","Player","name","gameboard","hasLost","Game","name1","name2","playerOne","playerTwo","whoseTurn","winner","howManyTurns","P1PlaceShip","P2PlaceShip","makeTurn","isP1FleetFull","isP2FleetFull","hitResult","isP1SqOccupied","isP2SqOccupied","P1Name","P2Name","P1WasAttacked","P2WasAttacked","isP1PatrolBoatSunk","wasP1PatrolBoatHit","P1PatrolBoatCoords","isP2PatrolBoatSunk","wasP2PatrolBoatHit","P2PatrolBoatCoords","isP1SubmarineSunk","wasP1SubmarineHit","P1SubmarineCoords","isP2SubmarineSunk","wasP2SubmarineHit","P2SubmarineCoords","isP1DestroyerSunk","wasP1DestroyerHit","P1DestroyerCoords","isP2DestroyerSunk","wasP2DestroyerHit","P2DestroyerCoords","isP1BattleshipSunk","wasP1BattleshipHit","P1BattleshipCoords","isP2BattleshipSunk","wasP2BattleshipHit","P2BattleshipCoords","isP1CarrierSunk","wasP1CarrierHit","P1CarrierCoords","isP2CarrierSunk","wasP2CarrierHit","P2CarrierCoords","P1ChangeShipPosition","P2ChangeShipPosition","P1OpenForPlacement","P2OpenForPlacement","P1ChangeOrientation","P2ChangeOrientation","initialForm","boards","playerOneLabel","playerTwoLabel","whoseTurnWrapper","whoseTurnDOM","handoverDialogOne","handoverDialogTwo","playerOneBoard","playerOneBoardEnemy","playerOneRows","querySelectorAll","playerOneRowsEnemy","playerTwoBoard","playerTwoBoardEnemy","playerTwoRows","playerTwoRowsEnemy","P1Ready","P2Ready","P1ReadyDialog","P2ReadyDialog","isOutOfBoundary","addEventListener","display","show","removeAttribute","preventDefault","playerOneName","value","playerTwoName","textContent","game","currentlyDragged","currentlyDraggedOver","addP1DragEventListener","ondragstart","dataList","dataTransfer","replace","toUpperCase","orientation","dragClone","sizeKey","flexDirection","marginLeft","originalSquares","originalSquareNodes","squareClone","cloneNode","setData","rect","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","rem","getComputedStyle","getPropertyValue","body","setDragImage","addP2DragEventListener","playerOneRow","playerOneRowEnemy","playerTwoRow","playerTwoRowEnemy","shipLength","newSquares","l","classList","add","leftSquares","sqsCurDraggedOver","curDraggedOverCoords","boundary","originalSquareCoords","getData","coordOnBoard","contains","children","error","initialize"],"sourceRoot":""}